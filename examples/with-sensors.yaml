esphome:
  name: test-impulse-cover
  friendly_name: Test Impulse Cover

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:

ota:
  - platform: esphome

wifi:
  ssid: "test-network"
  password: "test1234"

  # Enable fallback hotspot
  ap:
    ssid: "Test Fallback"
    password: "test1234"

captive_portal:

# Import the custom component (local path for testing)
external_components:
  - source:
      type: local
      path: ../components
    components: [ impulse_cover ]

# GPIO Output for sending pulses
output:
  - platform: gpio
    pin: GPIO2
    id: test_gate_output

  # RGB LED outputs for status indication
  - platform: ledc
    pin: GPIO16
    id: test_gate_red
  - platform: ledc
    pin: GPIO17
    id: test_gate_green
  - platform: ledc
    pin: GPIO18
    id: test_gate_blue

# Optional: Binary sensors for testing
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO4
      mode: INPUT_PULLUP
      inverted: true
    name: "Test Gate Open"
    id: test_gate_open

  - platform: gpio
    pin:
      number: GPIO5
      mode: INPUT_PULLUP
      inverted: true
    name: "Test Gate Close"
    id: test_gate_close

# Main cover configuration for testing
cover:
  - platform: impulse_cover
    name: "Test Gate"
    id: test_gate

    # Required: Output for sending pulses
    output: test_gate_output

    # Required: Timing configuration
    open_duration: 15s
    close_duration: 15s

    # Optional: Safety and pulse timing
    pulse_delay: 500ms
    safety_timeout: 60s
    safety_max_cycles: 5

    # Optional: Endstop sensors
    open_sensor: test_gate_open
    close_sensor: test_gate_close

    # Optional: Sensor logic inversion
    open_sensor_inverted: false    # Set to true if sensor is active LOW
    close_sensor_inverted: false   # Set to true if sensor is active LOW

    # Automation triggers - executed when events occur
    on_open:
      - logger.log: "Gate is opening"
      - light.turn_on: status_led

    on_close:
      - logger.log: "Gate is closing"
      - light.turn_on: status_led

    on_idle:
      - logger.log: "Gate movement stopped"
      - light.turn_off: status_led

    on_safety:
      - logger.log:
          level: WARN
          format: "SAFETY TRIGGERED! Gate stopped due to timeout or cycle limit"
      - light.turn_on:
          id: status_led
          red: 100%
          green: 0%
          blue: 0%

# Status LED for automation demonstration
light:
  - platform: rgb
    name: "Gate Status LED"
    id: status_led
    red: test_gate_red
    green: test_gate_green
    blue: test_gate_blue
