name: Dependencies and Maintenance

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

jobs:
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Check ESPHome updates
      id: esphome_check
      run: |
        pip install --upgrade pip
        CURRENT_VERSION="2025.7.4"
        LATEST_VERSION=$(pip index versions esphome | grep -o 'Available versions: [^,]*' | sed 's/Available versions: //')
        
        echo "Current ESPHome version: $CURRENT_VERSION"
        echo "Latest ESPHome version: $LATEST_VERSION"
        
        if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
          echo "esphome_update_available=true" >> $GITHUB_OUTPUT
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
        else
          echo "esphome_update_available=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Test with latest ESPHome
      if: steps.esphome_check.outputs.esphome_update_available == 'true'
      run: |
        echo "🧪 Testing with ESPHome ${{ steps.esphome_check.outputs.latest_version }}..."
        pip install esphome==${{ steps.esphome_check.outputs.latest_version }}
        
        # Run basic validation tests
        chmod +x test-impulse-cover.sh
        ./test-impulse-cover.sh || echo "⚠️ Tests failed with new ESPHome version"
        
    - name: Check workflow updates
      run: |
        echo "🔍 Checking GitHub Actions versions..."
        
        # Check for outdated action versions
        find .github/workflows -name "*.yml" -exec grep -l "uses:" {} \; | while read file; do
          echo "Checking $file for outdated actions..."
          grep "uses:" "$file" | grep -v "@v4" | grep -v "@v3" && echo "⚠️ Found potentially outdated actions in $file" || echo "✅ Actions in $file appear current"
        done
        
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security audit
      run: |
        echo "🔒 Running security audit..."
        
        # Check for known vulnerable patterns in YAML files
        echo "Checking YAML configurations for security issues..."
        find . -name "*.yaml" -o -name "*.yml" | xargs grep -l "password\|secret\|token" | while read file; do
          if ! grep -q "secrets\|placeholder\|example" "$file"; then
            echo "⚠️ Potential security issue in $file"
          fi
        done
        
        # Check file permissions
        echo "Checking file permissions..."
        find . -type f -perm /o+w -exec echo "⚠️ World-writable file: {}" \;
        
        echo "✅ Security audit completed"
        
  documentation-check:
    name: Documentation Maintenance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check documentation freshness
      run: |
        echo "📚 Checking documentation freshness..."
        
        # Check if README was updated recently
        LAST_README_UPDATE=$(git log -1 --format="%ct" README.md)
        CURRENT_TIME=$(date +%s)
        DAYS_OLD=$(( ($CURRENT_TIME - $LAST_README_UPDATE) / 86400 ))
        
        echo "README.md was last updated $DAYS_OLD days ago"
        
        if [ $DAYS_OLD -gt 90 ]; then
          echo "⚠️ README.md hasn't been updated in over 90 days"
        else
          echo "✅ README.md is relatively fresh"
        fi
        
        # Check for broken links in documentation
        if command -v curl &> /dev/null; then
          echo "🔗 Checking for broken links..."
          grep -r "http[s]*://" docs/ README.md 2>/dev/null | grep -o 'http[s]*://[^)]*' | while read url; do
            if curl -s --head "$url" | head -n 1 | grep -q "200 OK"; then
              echo "✅ $url is accessible"
            else
              echo "⚠️ $url may be broken"
            fi
          done
        fi
        
  cleanup:
    name: Repository Cleanup
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Clean up temporary files
      run: |
        echo "🧹 Cleaning up repository..."
        
        # Find and list potential cleanup targets
        echo "Looking for potential cleanup targets..."
        
        # Large files
        find . -type f -size +1M -not -path "./.git/*" | while read file; do
          echo "📄 Large file found: $file ($(du -h "$file" | cut -f1))"
        done
        
        # Empty directories (excluding .git)
        find . -type d -empty -not -path "./.git/*" | while read dir; do
          echo "📁 Empty directory: $dir"
        done
        
        # Old log files or temporary files
        find . -name "*.log" -o -name "*.tmp" -o -name "*.temp" -not -path "./.git/*" | while read file; do
          echo "🗑️ Temporary file: $file"
        done
        
        echo "✅ Cleanup scan completed"
        
  summary:
    name: Maintenance Summary
    runs-on: ubuntu-latest
    needs: [update-dependencies, security-audit, documentation-check, cleanup]
    if: always()
    
    steps:
    - name: Generate summary
      run: |
        echo "## 🔧 Weekly Maintenance Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Maintenance run completed on:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.update-dependencies.result }}" == "success" ]; then
          echo "✅ **Dependencies Check**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Dependencies Check**: ISSUES FOUND" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.security-audit.result }}" == "success" ]; then
          echo "✅ **Security Audit**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Security Audit**: ISSUES FOUND" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.documentation-check.result }}" == "success" ]; then
          echo "✅ **Documentation Check**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Documentation Check**: NEEDS ATTENTION" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.cleanup.result }}" == "success" ]; then
          echo "✅ **Repository Cleanup**: COMPLETED" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Repository Cleanup**: ISSUES FOUND" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 **Next maintenance**: $(date -d '+7 days')" >> $GITHUB_STEP_SUMMARY
