name: ESPHome Component Quality Check

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'components/**'
      - '*.yaml'
      - '**.yml'
  push:
    branches: [ main ]
    paths:
      - 'components/**'
      - '*.yaml'
      - '**.yml'

jobs:
  esphome-validation:
    name: ESPHome Configuration Validation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config:
          - examples/basic-configuration.yaml
          - examples/with-sensors.yaml
          - examples/advanced-test.yaml
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install ESPHome
      run: |
        pip install --upgrade pip
        pip install esphome
        
    - name: Validate ESPHome configuration
      run: |
        if [ -f "${{ matrix.config }}" ]; then
          echo "Validating ${{ matrix.config }}..."
          esphome config "${{ matrix.config }}"
        else
          echo "Configuration file ${{ matrix.config }} not found, skipping..."
        fi

  esphome-compilation:
    name: ESPHome Compilation Test
    runs-on: ubuntu-latest
    needs: esphome-validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install ESPHome
      run: |
        pip install --upgrade pip
        pip install esphome
        
    - name: Compile simple configuration
      run: |
        echo "Compiling examples/basic-configuration.yaml..."
        esphome compile examples/basic-configuration.yaml --no-logs

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install flake8 black isort yamllint
        
    - name: Check Python code formatting with Black
      run: |
        echo "Checking Python code formatting..."
        black --check --diff components/
        
    - name: Check Python imports with isort
      run: |
        echo "Checking Python import sorting..."
        isort --check-only --diff components/
        
    - name: Lint Python code with flake8
      run: |
        echo "Linting Python code..."
        flake8 components/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 components/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: Lint YAML files
      run: |
        echo "Linting YAML files..."
        yamllint -d relaxed *.yaml *.yml

  cpp-quality:
    name: C++ Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install clang-format
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format
        
    - name: Check C++ code formatting
      run: |
        echo "Checking C++ code formatting..."
        find components/ -name "*.cpp" -o -name "*.h" | xargs clang-format --dry-run --Werror
        
    - name: Install cppcheck
      run: |
        sudo apt-get install -y cppcheck
        
    - name: Run cppcheck static analysis
      run: |
        echo "Running C++ static analysis..."
        cppcheck --enable=warning,style,performance,portability --error-exitcode=1 components/

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for README
      run: |
        if [ ! -f "README.md" ]; then
          echo "❌ README.md is missing"
          exit 1
        fi
        echo "✅ README.md found"
        
    - name: Check documentation completeness
      run: |
        echo "Checking documentation completeness..."
        
        # Check if README contains essential sections
        sections=("Installation" "Configuration" "Usage" "Example")
        for section in "${sections[@]}"; do
          if ! grep -qi "$section" README.md; then
            echo "⚠️  Section '$section' might be missing in README.md"
          else
            echo "✅ Section '$section' found"
          fi
        done
        
        # Check for inline comments in code
        if ! grep -r "//\|#" components/ > /dev/null; then
          echo "⚠️  Consider adding more inline comments to the code"
        else
          echo "✅ Code contains comments"
        fi

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r components/ -f json -o bandit-report.json || true
        
    - name: Check for hardcoded secrets
      run: |
        echo "Checking for potential hardcoded secrets..."
        
        # Check for common secret patterns
        patterns=("password" "secret" "key" "token" "api_key")
        for pattern in "${patterns[@]}"; do
          if grep -ri "$pattern.*=" components/ *.yaml *.yml 2>/dev/null | grep -v "example\|test\|placeholder"; then
            echo "⚠️  Potential hardcoded secret found: $pattern"
          fi
        done
        echo "✅ Security check completed"

  esphome-standards:
    name: ESPHome Standards Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check component structure
      run: |
        echo "Checking ESPHome component structure..."
        
        # Check required files
        required_files=("components/impulse_cover/__init__.py" "components/impulse_cover/cover.py")
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Required file missing: $file"
            exit 1
          else
            echo "✅ Found: $file"
          fi
        done
        
        # Check for C++ implementation
        if [ ! -f "components/impulse_cover/impulse_cover.h" ] || [ ! -f "components/impulse_cover/impulse_cover.cpp" ]; then
          echo "❌ C++ implementation files missing"
          exit 1
        fi
        echo "✅ C++ implementation found"
        
    - name: Check ESPHome configuration standards
      run: |
        echo "Checking ESPHome configuration standards..."
        
        # Check for proper schema usage
        if ! grep -q "CONFIG_SCHEMA" components/impulse_cover/cover.py; then
          echo "❌ CONFIG_SCHEMA not found in cover.py"
          exit 1
        fi
        echo "✅ CONFIG_SCHEMA found"
        
        # Check for proper to_code function
        if ! grep -q "async def to_code" components/impulse_cover/cover.py; then
          echo "❌ to_code function not found"
          exit 1
        fi
        echo "✅ to_code function found"
        
        # Check for proper component inheritance
        if ! grep -q "cover.Cover.*Component" components/impulse_cover/impulse_cover.h; then
          echo "❌ Proper component inheritance not found"
          exit 1
        fi
        echo "✅ Component inheritance correct"

  results:
    name: Quality Check Results
    runs-on: ubuntu-latest
    needs: [esphome-validation, esphome-compilation, code-quality, cpp-quality, documentation, security, esphome-standards]
    if: always()
    
    steps:
    - name: Report results
      run: |
        echo "## 🔍 Quality Check Results" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.esphome-validation.result }}" == "success" ]; then
          echo "✅ ESPHome Configuration Validation: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ ESPHome Configuration Validation: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.esphome-compilation.result }}" == "success" ]; then
          echo "✅ ESPHome Compilation: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ ESPHome Compilation: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.code-quality.result }}" == "success" ]; then
          echo "✅ Code Quality: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Code Quality: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.cpp-quality.result }}" == "success" ]; then
          echo "✅ C++ Quality: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ C++ Quality: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.documentation.result }}" == "success" ]; then
          echo "✅ Documentation: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Documentation: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.security.result }}" == "success" ]; then
          echo "✅ Security: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Security: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.esphome-standards.result }}" == "success" ]; then
          echo "✅ ESPHome Standards: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ ESPHome Standards: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🎯 **Quality Gate**: All checks must pass before merging to main" >> $GITHUB_STEP_SUMMARY
